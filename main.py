import telebot 
from telebot import types
from datetime import datetime
from database_client import DatabaseClient

# –¢–æ–∫–µ–Ω –≤—ñ–¥ BotFather
TOKEN = '7022170542:AAFsW-pgaVw70jiaiRx9qDk2ecngUCEosGU'
bot = telebot.TeleBot(TOKEN)

# –ï–∫–∑–µ–º–ø–ª—è—Ä –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
db = DatabaseClient()

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏
client_data = {}
admin_sessions = {}


###################################################### –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ ######################################################


# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
commands = [
    telebot.types.BotCommand("/start", "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
    telebot.types.BotCommand("/admin", "–í—Ö—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
]

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
try:
    bot.set_my_commands(commands)
except telebot.apihelper.ApiTelegramException as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ '/start'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞—Ä–∫—ñ–Ω–≥–æ–º!")
    show_main_menu(message.chat.id)


###################################################### –ú–µ–Ω—é ######################################################


# –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def show_main_menu(chat_id, text="–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_auth = types.KeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è')
    btn_reg = types.KeyboardButton('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è')
    markup.add(btn_auth, btn_reg)
    bot.send_message(chat_id, text, reply_markup=markup)

# –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –ø–æ—Å–ª—É–≥
def show_service_menu(chat_id, text="–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_services = types.KeyboardButton('–ü–æ—Å–ª—É–≥–∏')
    btn_backmain = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
    markup.add(btn_services)
    markup.add(btn_backmain)
    bot.send_message(chat_id, text, reply_markup=markup)


###################################################### –ö–Ω–æ–ø–∫–∏ ######################################################


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è"
@bot.message_handler(func=lambda message: message.text == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
def handle_registration(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:")
    bot.register_next_step_handler(msg, process_name_step)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
def process_name_step(message):
    chat_id = message.chat.id
    name = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:")
    bot.register_next_step_handler(msg, lambda msg: process_numbercar_step(msg, name))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
def process_numbercar_step(message, name):
    chat_id = message.chat.id
    numbercar = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É –≤–∞—à–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:")
    bot.register_next_step_handler(msg, lambda msg: process_brand_step(msg, name, numbercar))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞—Ä–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
def process_brand_step(message, name, numbercar):
    chat_id = message.chat.id
    brand = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:")
    bot.register_next_step_handler(msg, lambda msg: process_payment_card_step(msg, name, numbercar, brand))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
def process_payment_card_step(message, name, numbercar, brand):
    chat_id = message.chat.id
    payment_card = message.text
    id_client, response = db.add_client(name, numbercar, brand, payment_card, chat_id)
    if id_client:
        client_data[chat_id] = {'id_client': id_client, 'name': name, 'payment_card': payment_card, 'numbercar': numbercar}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞
    bot.send_message(chat_id, response)
    show_main_menu(chat_id)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
def ask_for_numbercar(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:")
    bot.register_next_step_handler(msg, perform_authentication)


###################################################### –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ######################################################


# –û–±—Ä–æ–±–Ω–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
def perform_authentication(message):
    numbercar = message.text.strip()
    client_info = db.authenticate_by_numbercar(numbercar)
    if client_info:
        entry_datetime = datetime.strptime(client_info[5], '%Y-%m-%d %H:%M:%S')
        exit_datetime = datetime.strptime(client_info[6], '%Y-%m-%d %H:%M:%S')

        formatted_entry_date = entry_datetime.strftime('%Y-%m-%d %H:%M:%S')
        formatted_exit_date = exit_datetime.strftime('%Y-%m-%d %H:%M:%S')


        client_data[message.chat.id] = {'id_client': client_info[0], 'name': client_info[1], 'payment_card': client_info[4], 'numbercar': client_info[2]}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞
        balance = db.get_balance(client_info[4])

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_services = types.KeyboardButton('–ü–æ—Å–ª—É–≥–∏')
        btn_backmain = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
        markup.add(btn_services)
        markup.add(btn_backmain)

        bot.send_message(message.chat.id,
            f"""üôç‚Äç‚ôÇÔ∏è –í—ñ—Ç–∞—î–º–æ, {client_info[1]}!\n<b>‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—å.</b>\n
        --------------------------------
üìí 1. –ù–æ–º–µ—Ä –≤–∞—à–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {client_info[2]}
üöò 2. –í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {client_info[3]}
üïõ 3. –ß–∞—Å –∑–∞—ó–∑–¥—É: {formatted_entry_date}
üïõ 4. –ß–∞—Å –≤–∏—ó–∑–¥—É: {formatted_exit_date}
üí≥ 5. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} UAH
üÖøÔ∏è 6. –ú—ñ—Å—Ü–µ –¥–ª—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è: {client_info[7]}
üè¢ 7. –ü–æ–≤–µ—Ä—Ö: {client_info[8]}
        --------------------------------""",
            parse_mode='HTML', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–¶–µ–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.")
        show_main_menu(message.chat.id)


###################################################### –ü–æ—Å–ª—É–≥–∏ ######################################################


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–ª—É–≥–∏"
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–ª—É–≥–∏")
def handle_services(message):
    services = db.fetch_active_services()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    if services:
        for service_id, name, description, price in services:
            button_text = f"{name} - {price} UAH"
            markup.add(types.KeyboardButton(button_text))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞ –æ–ø–ª–∞—Ç–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: process_service_selection(msg, services))
    else:
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ—Å–ª—É–≥.", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏
def process_service_selection(message, services):
    selection = message.text
    if selection == '–ù–∞–∑–∞–¥':
        show_service_menu(message.chat.id)
        return
    
    selected_service = next((s for s in services if f"{s[1]} - {s[3]} UAH" == selection), None)
    if selected_service:
        service_id, name, description, price = selected_service
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏"), types.KeyboardButton('–ù–∞–∑–∞–¥')) 
        response_text = f"{name}\n–û–ø–∏—Å: {description}\n–¶—ñ–Ω–∞: {price} UAH\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û–ø–ª–∞—Ç–∏—Ç–∏' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∞–±–æ '–ù–∞–∑–∞–¥' –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è."
        bot.send_message(message.chat.id, response_text, reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: process_payment(msg, service_id, price, name))

# –û–±—Ä–æ–±–Ω–∏–∫ –æ–ø–ª–∞—Ç–∏ –ø–æ—Å–ª—É–≥–∏
def process_payment(message, service_id, price, service_name):
    if message.text == "–û–ø–ª–∞—Ç–∏—Ç–∏":
        client = client_data.get(message.chat.id)
        if client:
            payment_card = client['payment_card']
            id_client = client['id_client']
            success, new_balance = db.deduct_money(payment_card, price)
            if not success:
                bot.send_message(message.chat.id, f"""
<b>ü§ñ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.</b>
<b>üí≥ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} UAH""", parse_mode='HTML')
                show_service_menu(message.chat.id)
                return

            order_id = db.create_order(id_client, service_id)
            if isinstance(order_id, int):
                db.update_order_status(order_id, 'paid')

                if service_name == "–î–æ–±–æ–≤–µ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è":
                    db.extend_parking(client['numbercar'])
                elif service_name == "–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ü–µ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è":
                    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –º—ñ—Å—Ü—è –¥–ª—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è:")
                    bot.register_next_step_handler(msg, lambda msg: process_new_parking_place(msg, id_client))
                    return
                
                bot.send_message(message.chat.id, f"""
<b>ü§ñ –í–∞—à –ø–ª–∞—Ç—ñ–∂ –Ω–∞ —Å—É–º—É {price} UAH –ø—Ä–∏–π–Ω—è—Ç–æ.
       –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ.</b>\n
<b>üí≥ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} UAH""", parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞: {order_id}")
        else:
            bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.")
        show_service_menu(message.chat.id)
    elif message.text == '–ù–∞–∑–∞–¥':
        handle_services(message)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º—ñ—Å—Ü—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è
def process_new_parking_place(message, id_client):
    new_place_number = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ–≤–µ—Ä—Ö:")
    bot.register_next_step_handler(msg, lambda msg: finalize_new_parking_place(msg, id_client, new_place_number))

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∑–º—ñ–Ω–∏ –º—ñ—Å—Ü—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è
def finalize_new_parking_place(message, id_client, new_place_number):
    new_floor = message.text.strip()
    response = db.change_parking_space(id_client, new_place_number, new_floor)
    bot.send_message(message.chat.id, response)
    show_service_menu(message.chat.id)
    
    
    
###################################################### –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ######################################################
    
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def handle_back_to_main(message):
    show_main_menu(message.chat.id, "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")


###################################################### –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å ######################################################

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ '/admin'
@bot.message_handler(commands=['admin'])
def admin_login(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(msg, process_admin_login)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def process_admin_login(message):
    if message.text == "admin":
        admin_sessions[message.chat.id] = True
        bot.send_message(message.chat.id, "–í—ñ—Ç–∞—î–º–æ, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        show_admin_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        show_main_menu(message.chat.id)

# –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def show_admin_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_delete_user = types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
    btn_edit_parking = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è')
    btn_view_orders = types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    btn_service_edit = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤')
    btn_backmain = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
    markup.add(btn_delete_user, btn_edit_parking, btn_view_orders, btn_service_edit)
    markup.add(btn_backmain)
    bot.send_message(chat_id, "–ú–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
@bot.message_handler(func=lambda message: message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
def ask_for_delete_user(message):
    if admin_sessions.get(message.chat.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
        bot.register_next_step_handler(msg, delete_user)
    else:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞
def stop_bot(message):
    if message.chat.id in admin_sessions:
        bot.send_message(message.chat.id, "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
        db.close()
        bot.stop_polling()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def delete_user(message):
    numbercar = message.text.strip()
    chat_id, response = db.delete_user_by_numbercar(numbercar)
    if chat_id:
        bot.send_message(chat_id, f"""üî¥ –í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑ –Ω–æ–º–µ—Ä–æ–º <b>{numbercar}</b> –µ–≤–∞–∫—É–π–æ–≤–∞–Ω–æ –∑ –º—ñ—Å—Ü—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è.""", parse_mode='HTML')
    bot.send_message(message.chat.id, response)
    show_admin_menu(message.chat.id)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è"
@bot.message_handler(func=lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ü–µ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è")
def ask_for_parking_details(message):
    if admin_sessions.get(message.chat.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –º—ñ—Å—Ü—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è:")
        bot.register_next_step_handler(msg, process_parking_change)
    else:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è
def process_parking_change(message):
    numbercar = message.text.strip()
    client = db.authenticate_by_numbercar(numbercar)
    if client:
        client_id = client[0]
        client_name = client[1]
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –º—ñ—Å—Ü—è –¥–ª—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è:")
        bot.register_next_step_handler(msg, lambda msg: get_new_floor(msg, client_id, client_name, numbercar))
    else:
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        show_admin_menu(message.chat.id)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ—Ä—Ö—É –¥–ª—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è
def get_new_floor(message, client_id, client_name, numbercar):
    new_place_number = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ–≤–µ—Ä—Ö:")
    bot.register_next_step_handler(msg, lambda msg: finalize_parking_change(msg, client_id, client_name, new_place_number, numbercar))

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∑–º—ñ–Ω–∏ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è
def finalize_parking_change(message, client_id, client_name, new_place_number, numbercar):
    new_floor = message.text.strip()
    response = db.change_parking_space(client_id, new_place_number, new_floor)
    bot.send_message(message.chat.id, response)
    show_admin_menu(message.chat.id)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def ask_for_vehicle_number(message):
    if admin_sessions.get(message.chat.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å:")
        bot.register_next_step_handler(msg, view_orders)
    else:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å
def view_orders(message):
    numbercar = message.text.strip()
    orders = db.get_order_history_by_numbercar(numbercar)
    if orders:
        response = "\n".join([f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID: {order[0]}, –ü–æ—Å–ª—É–≥–∞: {order[1]}, –°—Ç–∞—Ç—É—Å: {order[2]}, –¶—ñ–Ω–∞: {order[3]}" for order in orders])
    else:
        response = "–ñ–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    bot.send_message(message.chat.id, response)
    show_admin_menu(message.chat.id)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤"
@bot.message_handler(func=lambda message: message.text == "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤")
def handle_edit_services(message):
    services = db.fetch_all_services()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    if services:
        for service_id, name in services:
            button_text = f"{name} - ID: {service_id}"
            markup.add(types.KeyboardButton(button_text))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: process_service_edit_selection(msg, services))
    else:
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤.", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
def process_service_edit_selection(message, services):
    selection = message.text
    if selection == '–ù–∞–∑–∞–¥':
        show_admin_menu(message.chat.id)
        return
    
    selected_service = next((s for s in services if f"{s[1]} - ID: {s[0]}" == selection), None)
    if selected_service:
        service_id, name = selected_service
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_edit = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏')
        btn_cancel = types.KeyboardButton('–°–∫–∞—Å—É–≤–∞—Ç–∏')
        markup.add(btn_edit, btn_cancel)
        msg = bot.send_message(message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ —Å–µ—Ä–≤—ñ—Å: {name}\n–ë–∞–∂–∞—î—Ç–µ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda msg: process_service_edit_choice(msg, service_id, name))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å
def process_service_edit_choice(message, service_id, name):
    if message.text == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏':
        msg = bot.send_message(message.chat.id, f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É: {name}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:")
        bot.register_next_step_handler(msg, lambda msg: process_service_name_edit(msg, service_id))
    elif message.text == '–°–∫–∞—Å—É–≤–∞—Ç–∏':
        bot.send_message(message.chat.id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        show_admin_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏' –∞–±–æ '–°–∫–∞—Å—É–≤–∞—Ç–∏'.")
        process_service_edit_selection(message, services)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–∞–∑–≤–∏ —Å–µ—Ä–≤—ñ—Å—É
def process_service_name_edit(message, service_id):
    new_name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å —Å–µ—Ä–≤—ñ—Å—É:")
    bot.register_next_step_handler(msg, lambda msg: process_service_description_edit(msg, service_id, new_name))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É —Å–µ—Ä–≤—ñ—Å—É
def process_service_description_edit(message, service_id, new_name):
    new_description = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_activate = types.KeyboardButton('–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏')
    btn_deactivate = types.KeyboardButton('–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏')
    markup.add(btn_activate, btn_deactivate)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: finalize_service_edit(msg, service_id, new_name, new_description))

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
def finalize_service_edit(message, service_id, new_name, new_description):
    action = message.text
    active = action == '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏'
    db.update_service(service_id, new_name, new_description, active)
    bot.send_message(message.chat.id, f"–°–µ—Ä–≤—ñ—Å {new_name} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    show_admin_menu(message.chat.id)

# –ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
bot.polling(none_stop=True)
